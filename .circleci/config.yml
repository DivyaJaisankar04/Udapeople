version: 2.1
orbs:
  slack: circleci/slack@4.12.5
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      back_end:
        default: "backend${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws --version
            echo "DESTROY STACKS"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name backend${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend${CIRCLE_WORKFLOW_ID:0:7}
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Destroyed !!"
            #exit 1
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi      
            
jobs:
  notify:
    docker:
      - image: cimg/base:2021.04
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test

  #Test Back-end
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            #--tags Project=udapeople \
            --stack-name "backend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt

      


      #Frontend deploy infra
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project=udapeople \
            --stack-name "frontend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:ab:13:47:6a:42:74:43:00:96:b4:0f:b0:62:ec:c2"]
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm
            pip install awscli
            cd ~/project/.circleci/ansible/
            pwd
            ls -al ~/project/backend
            cat ~/project/.circleci/ansible/inventory.txt
            
      - attach_workspace:
          at: ~/project/

      - run:
          name: add values to backend/.env files
          no_output_timeout: 30m
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations.txt

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/uoGdCbxst554z1wY1xXWK/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      #- revert-migrations
      - destroy-environment
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            
            export API_URL="http://${BACKENDIP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKENDIP}:3030" >> frontend/.env
            cat ~/project/frontend/.env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            #cd frontend
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            #npm install webpack-dev-server -g
            #npm i
            #npm run build
            #npm audit fix --audit-level=critical --force
            #cat ~/project/frontend/.env
            #tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz.dist
          
            #aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:ab:13:47:6a:42:74:43:00:96:b4:0f:b0:62:ec:c2"]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
            
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install --silent
            npm run build 2>/dev/null
            cd ..
            tar -C backend -czvf artifact.tar.gz
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"

            ansible-playbook -i /root/project/.circleci/ansible/inventory.txt /root/project/.circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Backend smoke test.
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
                    echo "Backend-ip: ${BACKEND_IP}"
                    API_URL="http://${BACKEND_IP}:3030"
                    echo "API URL: ${API_URL}"

                    # your code here
                    # Fetch and prepare the BACKEND_IP env var
                    if curl "${API_URL}/api/status" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    # your code here
                    sleep 60
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
                requires: [deploy-backend, deploy-frontend]
      - notify:
          context: slack-secrets
