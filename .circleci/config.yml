version: 2.1
orbs:
  slack: circleci/slack@4.12.5
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      back_end:
        default: "backend${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws --version
            echo "DESTROY STACKS"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name backend${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend${CIRCLE_WORKFLOW_ID:0:7}
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Destroyed ?????"
            #exit 1
            
jobs:
  notify:
    docker:
      - image: cimg/base:2021.04
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm install
            npm run test

  #Test Back-end
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip jq npm
      - run: yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm jq

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project=udapeople \
            --stack-name "backend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/

            SERVER_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text)

            echo $SERVER_IP >> inventory.txt
            cat inventory.txt
            ls ~/project/backend
            cp inventory.txt ~/project/backend
            ls ~/project/backend

      
      #Frontend deploy infra
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project=udapeople \
            --stack-name "frontend${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:ab:13:47:6a:42:74:43:00:96:b4:0f:b0:62:ec:c2"]

      - attach_workspace:
          at: ~/project/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm
            pip install awscli
            cd ~/project/.circleci/ansible/
            pwd
            ls -al ~/project/backend
            cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: add values to backend/.env files
          no_output_timeout: 30m
          command: |
            echo PWD $(pwd)

            touch ~/project/backend/.env
            #ls -la ~/project/backend
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"

            cd ~/project/.circleci/ansible

            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=udapeople" --output text >> inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml

            pwd
            cat ~/project/backend/.env

      - persist_to_workspace:
          root: ~/project/
          paths:
            - backend/.env

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - attach_workspace:
          at: ~/project/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build

            echo 'DUMP MIGRATIONS'
            echo "PWD: " $(pwd)
            npm run migrations >> ~/project/backend/migrations_dump.txt

            echo 'DISPLAY CONTENTS'
            echo '*****************'
            cat migrations_dump.txt
            echo '-----------------'

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            pwd
            sudo cat ~/project/backend/migrations_dump.txt

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS = 1"
            else
              #echo $(curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} | grep "No migrations")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL = 0"
            fi

      #- revert-migrations
      - destroy-environment
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - attach_workspace:
          at: ~/project/

      - run:
          name: Install extra apps
          command: |
            cd ~/project/frontend
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            apk add --no-cache curl
            pip install awscli

      - run:
          name: Get backend url
          command: |
            echo "PWD " $(pwd)
            ls -la ~/project

            cd ~/project/frontend
            BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            BACKENDDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            touch .env
            export API_URL="http://${BACKENDIP}:3030"
            export API_DNS="http://${BACKENDDNS}:3030"
            echo "${API_URL}" >> .env
            #echo "BACKENDURL: ${API_URL}"
            #echo $BACKENDDNS
            echo ".env"
            cat ~/project/frontend/.env
            #echo ${API_URL}

            npm install webpack-dev-server -g
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
            cat ~/project/frontend/.env

            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["b0:ab:13:47:6a:42:74:43:00:96:b4:0f:b0:62:ec:c2"]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            pip install awscli
            apk add --update nodejs npm
            apk add --no-cache bash
            apk add --update tar gzip ansible nodejs npm curl jq
            apk add openssh-client

            ls -la ~/project/frontend/
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt

            pwd
            #tar -czvf backend.tgz /root/project/backend
            ls -la


      - run: cat ~/project/.circleci/ansible/inventory.txt

  smoke-test:
        docker:
            - image: node:13.8-buster
        steps:
            - checkout
            - run:
                name: Update packages
                command: |
                    apt update
            - run:
                name: Install dependencies (Curl)
                command: |
                    apt-get -y install curl
            - run:
                name: Install dependencies (AWS-Cli)
                command: |
                    apt-get -y install awscli
            - run:
                name: Backend smoke test.
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
                    echo "Backend-ip: ${BACKEND_IP}"
                    API_URL="http://${BACKEND_IP}:3030"
                    echo "API URL: ${API_URL}"

                    # your code here
                    # Fetch and prepare the BACKEND_IP env var
                    if curl "${API_URL}/api/status" | grep "ok"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    # your code here
                    sleep 60
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
                    echo ${URL} 
                    if curl -s ${URL} | grep "Welcome"
                    then
                        exit 0
                    else
                        exit 1
                    fi
            - destroy_environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
                requires: [deploy-backend, deploy-frontend]
      - notify:
          context: slack-secrets
